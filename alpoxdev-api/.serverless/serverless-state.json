{
  "service": {
    "service": "alpoxdev-api",
    "serviceObject": {
      "name": "alpoxdev-api"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "ap-northeast-2",
      "stage": "prod",
      "deploymentBucket": "alpoxdev-api",
      "environment": {
        "JWT_SECRET": "ALPOXDEV_API",
        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
        "MYSQL_HOST": "database.ciiivo8gm65a.ap-northeast-2.rds.amazonaws.com",
        "MYSQL_USER": "alpoxdev",
        "MYSQL_PASSWORD": "siriuskp_08",
        "MYSQL_DATABASE": "ALPOXDEV",
        "MYSQL_LOGGING": "false",
        "MYSQL_SYNC": "false"
      },
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "versionFunctions": true,
      "deploymentBucketObject": {
        "name": "alpoxdev-api"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/alpoxdev-api-prod-login"
            }
          },
          "RegisterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/alpoxdev-api-prod-register"
            }
          },
          "GetDashpostsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/alpoxdev-api-prod-get-posts"
            }
          },
          "GetDashpostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/alpoxdev-api-prod-get-post"
            }
          },
          "CreateDashpostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/alpoxdev-api-prod-create-post"
            }
          },
          "DeleteDashpostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/alpoxdev-api-prod-delete-post"
            }
          },
          "UpdateDashpostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/alpoxdev-api-prod-update-post"
            }
          },
          "GetDashtagsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/alpoxdev-api-prod-get-tags"
            }
          },
          "GetDashtagLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/alpoxdev-api-prod-get-tag"
            }
          },
          "DeleteDashtagLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/alpoxdev-api-prod-delete-tag"
            }
          },
          "UpdateDashtagLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/alpoxdev-api-prod-update-tag"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "alpoxdev-api",
                        "prod",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/alpoxdev-api-prod*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/alpoxdev-api-prod*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "alpoxdev-api",
                    "prod",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "alpoxdev-api",
                "S3Key": "serverless/alpoxdev-api/prod/1605601635669-2020-11-17T08:27:15.669Z/alpoxdev-api.zip"
              },
              "FunctionName": "alpoxdev-api-prod-login",
              "Handler": "handler.login",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "ALPOXDEV_API",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "MYSQL_HOST": "database.ciiivo8gm65a.ap-northeast-2.rds.amazonaws.com",
                  "MYSQL_USER": "alpoxdev",
                  "MYSQL_PASSWORD": "siriuskp_08",
                  "MYSQL_DATABASE": "ALPOXDEV",
                  "MYSQL_LOGGING": "false",
                  "MYSQL_SYNC": "false"
                }
              },
              "Layers": [
                "arn:aws:lambda:ap-northeast-2:225747239478:layer:alpoxdev-api-prod-nodejs-default:2"
              ]
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "LoginLambdaVersionNUBl3tnayAMF7eTXnoUlJSfD8Xb4hZ2UUIpyVERvQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "Znu5PN71sWdozSG9KWn/gxWPyJ81JOwB9Y76yTFWYHI="
            }
          },
          "RegisterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "alpoxdev-api",
                "S3Key": "serverless/alpoxdev-api/prod/1605601635669-2020-11-17T08:27:15.669Z/alpoxdev-api.zip"
              },
              "FunctionName": "alpoxdev-api-prod-register",
              "Handler": "handler.register",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "ALPOXDEV_API",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "MYSQL_HOST": "database.ciiivo8gm65a.ap-northeast-2.rds.amazonaws.com",
                  "MYSQL_USER": "alpoxdev",
                  "MYSQL_PASSWORD": "siriuskp_08",
                  "MYSQL_DATABASE": "ALPOXDEV",
                  "MYSQL_LOGGING": "false",
                  "MYSQL_SYNC": "false"
                }
              },
              "Layers": [
                "arn:aws:lambda:ap-northeast-2:225747239478:layer:alpoxdev-api-prod-nodejs-default:2"
              ]
            },
            "DependsOn": [
              "RegisterLogGroup"
            ]
          },
          "RegisterLambdaVersion4qEetsNgnkU4Hrz0kpmKZMWX3ra2zpgTw8cLb7bo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterLambdaFunction"
              },
              "CodeSha256": "Znu5PN71sWdozSG9KWn/gxWPyJ81JOwB9Y76yTFWYHI="
            }
          },
          "GetDashpostsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "alpoxdev-api",
                "S3Key": "serverless/alpoxdev-api/prod/1605601635669-2020-11-17T08:27:15.669Z/alpoxdev-api.zip"
              },
              "FunctionName": "alpoxdev-api-prod-get-posts",
              "Handler": "handler.getPosts",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "ALPOXDEV_API",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "MYSQL_HOST": "database.ciiivo8gm65a.ap-northeast-2.rds.amazonaws.com",
                  "MYSQL_USER": "alpoxdev",
                  "MYSQL_PASSWORD": "siriuskp_08",
                  "MYSQL_DATABASE": "ALPOXDEV",
                  "MYSQL_LOGGING": "false",
                  "MYSQL_SYNC": "false"
                }
              },
              "Layers": [
                "arn:aws:lambda:ap-northeast-2:225747239478:layer:alpoxdev-api-prod-nodejs-default:2"
              ]
            },
            "DependsOn": [
              "GetDashpostsLogGroup"
            ]
          },
          "GetDashpostsLambdaVersionecfKrdBEXbdnAKrVGSbBV99am3Y3MA5vVNjjJ2ct20": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashpostsLambdaFunction"
              },
              "CodeSha256": "Znu5PN71sWdozSG9KWn/gxWPyJ81JOwB9Y76yTFWYHI="
            }
          },
          "GetDashpostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "alpoxdev-api",
                "S3Key": "serverless/alpoxdev-api/prod/1605601635669-2020-11-17T08:27:15.669Z/alpoxdev-api.zip"
              },
              "FunctionName": "alpoxdev-api-prod-get-post",
              "Handler": "handler.getPost",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "ALPOXDEV_API",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "MYSQL_HOST": "database.ciiivo8gm65a.ap-northeast-2.rds.amazonaws.com",
                  "MYSQL_USER": "alpoxdev",
                  "MYSQL_PASSWORD": "siriuskp_08",
                  "MYSQL_DATABASE": "ALPOXDEV",
                  "MYSQL_LOGGING": "false",
                  "MYSQL_SYNC": "false"
                }
              },
              "Layers": [
                "arn:aws:lambda:ap-northeast-2:225747239478:layer:alpoxdev-api-prod-nodejs-default:2"
              ]
            },
            "DependsOn": [
              "GetDashpostLogGroup"
            ]
          },
          "GetDashpostLambdaVersionxqAGk2tB8MSGTznfUQyoXroRs02v7ng7cpZd8BQrA4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashpostLambdaFunction"
              },
              "CodeSha256": "Znu5PN71sWdozSG9KWn/gxWPyJ81JOwB9Y76yTFWYHI="
            }
          },
          "CreateDashpostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "alpoxdev-api",
                "S3Key": "serverless/alpoxdev-api/prod/1605601635669-2020-11-17T08:27:15.669Z/alpoxdev-api.zip"
              },
              "FunctionName": "alpoxdev-api-prod-create-post",
              "Handler": "handler.createPost",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "ALPOXDEV_API",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "MYSQL_HOST": "database.ciiivo8gm65a.ap-northeast-2.rds.amazonaws.com",
                  "MYSQL_USER": "alpoxdev",
                  "MYSQL_PASSWORD": "siriuskp_08",
                  "MYSQL_DATABASE": "ALPOXDEV",
                  "MYSQL_LOGGING": "false",
                  "MYSQL_SYNC": "false"
                }
              },
              "Layers": [
                "arn:aws:lambda:ap-northeast-2:225747239478:layer:alpoxdev-api-prod-nodejs-default:2"
              ]
            },
            "DependsOn": [
              "CreateDashpostLogGroup"
            ]
          },
          "CreateDashpostLambdaVersionupMmb0fE0CR4cedEs7IHt45JgPcwSxqEgkjIECENttI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateDashpostLambdaFunction"
              },
              "CodeSha256": "Znu5PN71sWdozSG9KWn/gxWPyJ81JOwB9Y76yTFWYHI="
            }
          },
          "DeleteDashpostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "alpoxdev-api",
                "S3Key": "serverless/alpoxdev-api/prod/1605601635669-2020-11-17T08:27:15.669Z/alpoxdev-api.zip"
              },
              "FunctionName": "alpoxdev-api-prod-delete-post",
              "Handler": "handler.deletePost",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "ALPOXDEV_API",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "MYSQL_HOST": "database.ciiivo8gm65a.ap-northeast-2.rds.amazonaws.com",
                  "MYSQL_USER": "alpoxdev",
                  "MYSQL_PASSWORD": "siriuskp_08",
                  "MYSQL_DATABASE": "ALPOXDEV",
                  "MYSQL_LOGGING": "false",
                  "MYSQL_SYNC": "false"
                }
              },
              "Layers": [
                "arn:aws:lambda:ap-northeast-2:225747239478:layer:alpoxdev-api-prod-nodejs-default:2"
              ]
            },
            "DependsOn": [
              "DeleteDashpostLogGroup"
            ]
          },
          "DeleteDashpostLambdaVersionjsRRjaLpYSkzYfGIxkGcSaOyMt51wVecHCp7dysVzI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteDashpostLambdaFunction"
              },
              "CodeSha256": "Znu5PN71sWdozSG9KWn/gxWPyJ81JOwB9Y76yTFWYHI="
            }
          },
          "UpdateDashpostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "alpoxdev-api",
                "S3Key": "serverless/alpoxdev-api/prod/1605601635669-2020-11-17T08:27:15.669Z/alpoxdev-api.zip"
              },
              "FunctionName": "alpoxdev-api-prod-update-post",
              "Handler": "handler.updatePost",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "ALPOXDEV_API",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "MYSQL_HOST": "database.ciiivo8gm65a.ap-northeast-2.rds.amazonaws.com",
                  "MYSQL_USER": "alpoxdev",
                  "MYSQL_PASSWORD": "siriuskp_08",
                  "MYSQL_DATABASE": "ALPOXDEV",
                  "MYSQL_LOGGING": "false",
                  "MYSQL_SYNC": "false"
                }
              },
              "Layers": [
                "arn:aws:lambda:ap-northeast-2:225747239478:layer:alpoxdev-api-prod-nodejs-default:2"
              ]
            },
            "DependsOn": [
              "UpdateDashpostLogGroup"
            ]
          },
          "UpdateDashpostLambdaVersionWs0GHhhJwmRzRoAhrkcyoZlco3i22xCkiVRLjIYHmJY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateDashpostLambdaFunction"
              },
              "CodeSha256": "Znu5PN71sWdozSG9KWn/gxWPyJ81JOwB9Y76yTFWYHI="
            }
          },
          "GetDashtagsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "alpoxdev-api",
                "S3Key": "serverless/alpoxdev-api/prod/1605601635669-2020-11-17T08:27:15.669Z/alpoxdev-api.zip"
              },
              "FunctionName": "alpoxdev-api-prod-get-tags",
              "Handler": "handler.getTags",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "ALPOXDEV_API",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "MYSQL_HOST": "database.ciiivo8gm65a.ap-northeast-2.rds.amazonaws.com",
                  "MYSQL_USER": "alpoxdev",
                  "MYSQL_PASSWORD": "siriuskp_08",
                  "MYSQL_DATABASE": "ALPOXDEV",
                  "MYSQL_LOGGING": "false",
                  "MYSQL_SYNC": "false"
                }
              },
              "Layers": [
                "arn:aws:lambda:ap-northeast-2:225747239478:layer:alpoxdev-api-prod-nodejs-default:2"
              ]
            },
            "DependsOn": [
              "GetDashtagsLogGroup"
            ]
          },
          "GetDashtagsLambdaVersionhbO15KUuq7Ue51XAtdb2pBG6kaQSFlzjg8CWBgy8YqY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashtagsLambdaFunction"
              },
              "CodeSha256": "Znu5PN71sWdozSG9KWn/gxWPyJ81JOwB9Y76yTFWYHI="
            }
          },
          "GetDashtagLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "alpoxdev-api",
                "S3Key": "serverless/alpoxdev-api/prod/1605601635669-2020-11-17T08:27:15.669Z/alpoxdev-api.zip"
              },
              "FunctionName": "alpoxdev-api-prod-get-tag",
              "Handler": "handler.getTag",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "ALPOXDEV_API",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "MYSQL_HOST": "database.ciiivo8gm65a.ap-northeast-2.rds.amazonaws.com",
                  "MYSQL_USER": "alpoxdev",
                  "MYSQL_PASSWORD": "siriuskp_08",
                  "MYSQL_DATABASE": "ALPOXDEV",
                  "MYSQL_LOGGING": "false",
                  "MYSQL_SYNC": "false"
                }
              },
              "Layers": [
                "arn:aws:lambda:ap-northeast-2:225747239478:layer:alpoxdev-api-prod-nodejs-default:2"
              ]
            },
            "DependsOn": [
              "GetDashtagLogGroup"
            ]
          },
          "GetDashtagLambdaVersionA2dnF7RgsuHkxfQs2iqT4VQGYutUoStnDhCwU5t12M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashtagLambdaFunction"
              },
              "CodeSha256": "Znu5PN71sWdozSG9KWn/gxWPyJ81JOwB9Y76yTFWYHI="
            }
          },
          "DeleteDashtagLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "alpoxdev-api",
                "S3Key": "serverless/alpoxdev-api/prod/1605601635669-2020-11-17T08:27:15.669Z/alpoxdev-api.zip"
              },
              "FunctionName": "alpoxdev-api-prod-delete-tag",
              "Handler": "handler.deleteTag",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "ALPOXDEV_API",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "MYSQL_HOST": "database.ciiivo8gm65a.ap-northeast-2.rds.amazonaws.com",
                  "MYSQL_USER": "alpoxdev",
                  "MYSQL_PASSWORD": "siriuskp_08",
                  "MYSQL_DATABASE": "ALPOXDEV",
                  "MYSQL_LOGGING": "false",
                  "MYSQL_SYNC": "false"
                }
              },
              "Layers": [
                "arn:aws:lambda:ap-northeast-2:225747239478:layer:alpoxdev-api-prod-nodejs-default:2"
              ]
            },
            "DependsOn": [
              "DeleteDashtagLogGroup"
            ]
          },
          "DeleteDashtagLambdaVersion3j2pDw2UYXwoRhu0NFIRblnyXnRPDLuGDKlRt1xi0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteDashtagLambdaFunction"
              },
              "CodeSha256": "Znu5PN71sWdozSG9KWn/gxWPyJ81JOwB9Y76yTFWYHI="
            }
          },
          "UpdateDashtagLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "alpoxdev-api",
                "S3Key": "serverless/alpoxdev-api/prod/1605601635669-2020-11-17T08:27:15.669Z/alpoxdev-api.zip"
              },
              "FunctionName": "alpoxdev-api-prod-update-tag",
              "Handler": "handler.updateTag",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "ALPOXDEV_API",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "MYSQL_HOST": "database.ciiivo8gm65a.ap-northeast-2.rds.amazonaws.com",
                  "MYSQL_USER": "alpoxdev",
                  "MYSQL_PASSWORD": "siriuskp_08",
                  "MYSQL_DATABASE": "ALPOXDEV",
                  "MYSQL_LOGGING": "false",
                  "MYSQL_SYNC": "false"
                }
              },
              "Layers": [
                "arn:aws:lambda:ap-northeast-2:225747239478:layer:alpoxdev-api-prod-nodejs-default:2"
              ]
            },
            "DependsOn": [
              "UpdateDashtagLogGroup"
            ]
          },
          "UpdateDashtagLambdaVersionWVlgmfuRux1ANWxFdjHe1ZwJ8JE43q8kuc1BcWd4hSc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateDashtagLambdaFunction"
              },
              "CodeSha256": "Znu5PN71sWdozSG9KWn/gxWPyJ81JOwB9Y76yTFWYHI="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "prod-alpoxdev-api",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceAuth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "auth",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthRegister": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "register",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePosts": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "posts",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePostsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePosts"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTags": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "tags",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTagsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTags"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthLoginOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthRegisterOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthRegister"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPostsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePosts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPostsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PATCH,DELETE,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTagsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTags"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTagsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PATCH,DELETE,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTagsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodAuthRegisterPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthRegister"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RegisterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPostsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePosts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDashpostsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPostsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDashpostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPostsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePosts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateDashpostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPostsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteDashpostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPostsIdVarPatch": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PATCH",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateDashpostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodTagsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTags"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDashtagsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodTagsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTagsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDashtagLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodTagsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTagsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteDashtagLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodTagsIdVarPatch": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PATCH",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTagsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateDashtagLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1605601619248": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "prod"
            },
            "DependsOn": [
              "ApiGatewayMethodAuthLoginOptions",
              "ApiGatewayMethodAuthRegisterOptions",
              "ApiGatewayMethodPostsOptions",
              "ApiGatewayMethodPostsIdVarOptions",
              "ApiGatewayMethodTagsOptions",
              "ApiGatewayMethodTagsIdVarOptions",
              "ApiGatewayMethodAuthLoginPost",
              "ApiGatewayMethodAuthRegisterPost",
              "ApiGatewayMethodPostsGet",
              "ApiGatewayMethodPostsIdVarGet",
              "ApiGatewayMethodPostsPost",
              "ApiGatewayMethodPostsIdVarDelete",
              "ApiGatewayMethodPostsIdVarPatch",
              "ApiGatewayMethodTagsGet",
              "ApiGatewayMethodTagsIdVarGet",
              "ApiGatewayMethodTagsIdVarDelete",
              "ApiGatewayMethodTagsIdVarPatch"
            ]
          },
          "LoginLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RegisterLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetDashpostsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashpostsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetDashpostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashpostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateDashpostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateDashpostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteDashpostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteDashpostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateDashpostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateDashpostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetDashtagsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashtagsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetDashtagLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashtagLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteDashtagLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteDashtagLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateDashtagLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateDashtagLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "alpoxdev-api"
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersionNUBl3tnayAMF7eTXnoUlJSfD8Xb4hZ2UUIpyVERvQ"
            }
          },
          "RegisterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterLambdaVersion4qEetsNgnkU4Hrz0kpmKZMWX3ra2zpgTw8cLb7bo"
            }
          },
          "GetDashpostsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashpostsLambdaVersionecfKrdBEXbdnAKrVGSbBV99am3Y3MA5vVNjjJ2ct20"
            }
          },
          "GetDashpostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashpostLambdaVersionxqAGk2tB8MSGTznfUQyoXroRs02v7ng7cpZd8BQrA4"
            }
          },
          "CreateDashpostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateDashpostLambdaVersionupMmb0fE0CR4cedEs7IHt45JgPcwSxqEgkjIECENttI"
            }
          },
          "DeleteDashpostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteDashpostLambdaVersionjsRRjaLpYSkzYfGIxkGcSaOyMt51wVecHCp7dysVzI"
            }
          },
          "UpdateDashpostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateDashpostLambdaVersionWs0GHhhJwmRzRoAhrkcyoZlco3i22xCkiVRLjIYHmJY"
            }
          },
          "GetDashtagsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashtagsLambdaVersionhbO15KUuq7Ue51XAtdb2pBG6kaQSFlzjg8CWBgy8YqY"
            }
          },
          "GetDashtagLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashtagLambdaVersionA2dnF7RgsuHkxfQs2iqT4VQGYutUoStnDhCwU5t12M"
            }
          },
          "DeleteDashtagLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteDashtagLambdaVersion3j2pDw2UYXwoRhu0NFIRblnyXnRPDLuGDKlRt1xi0"
            }
          },
          "UpdateDashtagLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateDashtagLambdaVersionWVlgmfuRux1ANWxFdjHe1ZwJ8JE43q8kuc1BcWd4hSc"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/prod"
                ]
              ]
            }
          },
          "AlpoxdevDashapiDashprodDashnodejsDashdefaultLambdaLayerQualifiedArn": {
            "Value": "arn:aws:lambda:ap-northeast-2:225747239478:layer:alpoxdev-api-prod-nodejs-default:2",
            "Export": {
              "Name": "AlpoxdevDashapiDashprodDashnodejsDashdefaultLambdaLayerQualifiedArn"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "serverless-layers": {
        "packageManager": "yarn"
      },
      "serverless-offline": {
        "useChildProcesses": true
      },
      "env": {
        "local": {
          "MYSQL_DATABASE": "ALPOXDEV",
          "MYSQL_LOGGING": true,
          "MYSQL_SYNC": true
        },
        "dev": {
          "MYSQL_DATABASE": "ALPOXDEV_DEV",
          "MYSQL_LOGGING": true,
          "MYSQL_SYNC": true
        },
        "prod": {
          "MYSQL_DATABASE": "ALPOXDEV",
          "MYSQL_LOGGING": false,
          "MYSQL_SYNC": false
        }
      }
    },
    "plugins": [
      "serverless-offline",
      "serverless-plugin-typescript",
      "serverless-layers"
    ],
    "pluginsData": {},
    "functions": {
      "login": {
        "handler": "handler.login",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "auth/login",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "alpoxdev-api-prod-login",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LoginLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "LoginLambdaVersionNUBl3tnayAMF7eTXnoUlJSfD8Xb4hZ2UUIpyVERvQ"
      },
      "register": {
        "handler": "handler.register",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "auth/register",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "alpoxdev-api-prod-register",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RegisterLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "RegisterLambdaVersion4qEetsNgnkU4Hrz0kpmKZMWX3ra2zpgTw8cLb7bo"
      },
      "get-posts": {
        "handler": "handler.getPosts",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "posts",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "alpoxdev-api-prod-get-posts",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDashpostsLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetDashpostsLambdaVersionecfKrdBEXbdnAKrVGSbBV99am3Y3MA5vVNjjJ2ct20"
      },
      "get-post": {
        "handler": "handler.getPost",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "posts/{id}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "alpoxdev-api-prod-get-post",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDashpostLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetDashpostLambdaVersionxqAGk2tB8MSGTznfUQyoXroRs02v7ng7cpZd8BQrA4"
      },
      "create-post": {
        "handler": "handler.createPost",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "posts",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "alpoxdev-api-prod-create-post",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateDashpostLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreateDashpostLambdaVersionupMmb0fE0CR4cedEs7IHt45JgPcwSxqEgkjIECENttI"
      },
      "delete-post": {
        "handler": "handler.deletePost",
        "events": [
          {
            "http": {
              "method": "delete",
              "path": "posts/{id}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "alpoxdev-api-prod-delete-post",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteDashpostLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteDashpostLambdaVersionjsRRjaLpYSkzYfGIxkGcSaOyMt51wVecHCp7dysVzI"
      },
      "update-post": {
        "handler": "handler.updatePost",
        "events": [
          {
            "http": {
              "method": "patch",
              "path": "posts/{id}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PATCH"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "alpoxdev-api-prod-update-post",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateDashpostLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateDashpostLambdaVersionWs0GHhhJwmRzRoAhrkcyoZlco3i22xCkiVRLjIYHmJY"
      },
      "get-tags": {
        "handler": "handler.getTags",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "tags",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "alpoxdev-api-prod-get-tags",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDashtagsLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetDashtagsLambdaVersionhbO15KUuq7Ue51XAtdb2pBG6kaQSFlzjg8CWBgy8YqY"
      },
      "get-tag": {
        "handler": "handler.getTag",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "tags/{id}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "alpoxdev-api-prod-get-tag",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDashtagLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetDashtagLambdaVersionA2dnF7RgsuHkxfQs2iqT4VQGYutUoStnDhCwU5t12M"
      },
      "delete-tag": {
        "handler": "handler.deleteTag",
        "events": [
          {
            "http": {
              "method": "delete",
              "path": "tags/{id}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "alpoxdev-api-prod-delete-tag",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteDashtagLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteDashtagLambdaVersion3j2pDw2UYXwoRhu0NFIRblnyXnRPDLuGDKlRt1xi0"
      },
      "update-tag": {
        "handler": "handler.updateTag",
        "events": [
          {
            "http": {
              "method": "patch",
              "path": "tags/{id}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PATCH"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "alpoxdev-api-prod-update-tag",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateDashtagLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateDashtagLambdaVersionWVlgmfuRux1ANWxFdjHe1ZwJ8JE43q8kuc1BcWd4hSc"
      }
    },
    "resources": {
      "Outputs": {
        "AlpoxdevDashapiDashprodDashnodejsDashdefaultLambdaLayerQualifiedArn": {
          "Value": "arn:aws:lambda:ap-northeast-2:225747239478:layer:alpoxdev-api-prod-nodejs-default:2",
          "Export": {
            "Name": "AlpoxdevDashapiDashprodDashnodejsDashdefaultLambdaLayerQualifiedArn"
          }
        }
      },
      "Resources": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/alpox/Desktop/dev/@projects/alpoxdev/alpoxdev-api/.build/.serverless/alpoxdev-api.zip"
  },
  "package": {
    "individually": false,
    "artifactDirectoryName": "serverless/alpoxdev-api/prod/1605601635669-2020-11-17T08:27:15.669Z",
    "artifact": "alpoxdev-api.zip"
  }
}